# -*- coding: utf-8 -*-
"""data_expert_19112022.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jdz4PoAjcN_UtkgK8cPqAzG9pKgqd6Dg
"""

2+3+4

99-73

((2+5)*(17-3))/(4**3)

my_fav = 1
my_least_fav = 5
a_neutral = 3

# equal check true
my_fav == 1

# equal check false
my_fav == my_least_fav

!pip install preprocessing

import numpy as np
from sklearn import preprocessing

sample_data = np.array([[2.1, -1.9, 5.5],
                        [-1.5, 2.4, 3.5],
                        [0.5, -7.9, 5.6],
                        [5.9, 2.3, -5.8]])

sample_data

sample_data.shape

sample_data

"""teknik proses data menggunakan biner data"""

# parameter untuk mrngetahui ambang batas (threshold: batas toleransi -> 0.5)
preprocessor = preprocessing.Binarizer(threshold=0.5)
binarised_data = preprocessor.transform(sample_data)
binarised_data

"""teknik scalling"""





"""teknik encodingf data"""

label_kategori = ['senin', 'selasa', 'rabu', 'kamis', 'jumat', 'sabtu', 'minggu']
encoder = preprocessing.LabelEncoder()
encoder.fit(label_kategori)

print("\nLabel mappinng:")
for i, item in enumerate(encoder.classes_):
  print(item, "=", i)



"""training set dan test set"""

from sklearn.model_selection import train_test_split

X_data = range(10)
y_data = range(10)

print("random_state ditentukan")
for i in range(3):
  X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size = 0.3, random_state = 42)
  print(y_test)

print("random_state tidak ditentukan")
for i in range(3):
  X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size = 0.3, random_state = None)
  print(y_test)

"""Latihan SKLearn Train Test Split"""

import sklearn
from sklearn import datasets

# load iris dataset
iris = datasets.load_iris()

# pisahkan atribut dan label pada iris dataset
x=iris.data
y=iris.target

from sklearn.model_selection import train_test_split

# membagi dataset menjadi training dan testing
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

# menghitung panjang/jumlah data pada x_test
len(x_test)

"""Latihan Cross Validation decision tree"""

import sklearn
from sklearn import datasets

# Load iris dataset
iris = datasets.load_iris()

# mendefinisikan atribut dan label pada dataset
x=iris.data
y=iris.target

from sklearn import tree

# membuat model dengan decision tree ckassifier
clf = tree.DecisionTreeClassifier()

from sklearn.model_selection import cross_val_score

# mengevaluasi performa model dengan cross_val_score
scores = cross_val_score(clf, x, y, cv=2)

scores

iris

"""LOAD DATASET"""

from sklearn.datasets import load_iris

x, y = load_iris(return_X_y=True)

print(f'Dimensi Feature: {x.shape}')
print(f'Class: {set(y)}')

load_iris()

data = load_iris()
data

"""TTRAINING SPLIT"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3,random_state=0)

"""classification desc tree"""

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier(max_depth=4)

model.fit(x_train, y_train)

"""visualisasi model"""

import matplotlib.pyplot as plt
from sklearn import tree

plt.subplots(figsize=(10,10))
tree.plot_tree(model, fontsize=10)
plt.show()

"""EVALUASIO MODEL"""

from sklearn.metrics import classification_report

y_pred = model.predict(x_test)
print(classification_report(y_test,y_pred))



"""SUPERVISED 

Latihan Linier Regression
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

bedrooms = np.array([1,1,2,2,3,4,4,5,5,5])
house_price = np.array([15000,20000,50000,11000,68000,90000,12500,68000,90000,12500])

plt.scatter(bedrooms, house_price)

from sklearn.linear_model import LinearRegression

bedrooms = bedrooms.reshape(-1,1)
linreg = LinearRegression()
linreg.fit(bedrooms, house_price)

plt.scatter(bedrooms, house_price)
plt.plot(bedrooms, linreg.predict(bedrooms))



"""Latihan Logistic Regression"""

import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/data/Social_Network_Ads.csv")

df.head()

df.info()

df

# hapus kolom yang tidak perlu

data = df.drop(columns=["User ID"])

data

# one hot encoding pakai get dummies

data = pd.get_dummies(data)
data

# pisah atribut lable

pediction = ['Age', 'EstimatedSalary', 'Gender_Female','Gender_Male']

x = data[pediction]
y = data['Purchased']

# normalisasi

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(x)

scaled_data = scaler.transform(x)
scaled_data = pd.DataFrame(scaled_data, columns=x.columns)

scaled_data

# bagi data train dan test

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(scaled_data, y, test_size=0.2, random_state=1)

# model

from sklearn import linear_model

model = linear_model.LogisticRegression()

model.fit(X_train, y_train)

# uji akurasi model

model.score(X_test,y_test)



"""Unsupervised Learning

latihan kmeans
"""

import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/data/Mall_Customers.csv")

df.head(3)

# ubah nama kolom

df = df.rename(columns={'Gender': 'gender',
                        'Age': 'age',
                        'Annual Income (k$)': 'annual_income', 
                        'Spending Score (1-100)': 'spending_score'})

# ubah nama jd numerik
df['gender'].replace(['Female', 'Male'], [0,1], inplace=True)

df.head()

X = df.drop(['CustomerID','gender'], axis=1)

# import kmeans

from sklearn.cluster import KMeans

# membuat list 

clusters = []

for i in range(1,11):
  km = KMeans(n_clusters=i).fit(X)
  clusters.append(km.inertia_)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

fig, ax = plt.subplots(figsize=(8,4))
sns.lineplot(x=list(range(1,11)), y=clusters, ax=ax)
ax.set_title('Cari Elbow')
ax.set_xlabel('cluster')
ax.set_ylabel('Inertia')

# buat object km

km5 = KMeans(n_clusters=5).fit(X)

# tambah kolom label pada dataset
X['Labels'] = km5.labels_

# buat 5 cluster kmeans

plt.figure(figsize=(8,4))
sns.scatterplot(X['annual_income'], X['spending_score'], hue=X['Labels'], palette=sns.color_palette('hls',5))

plt.title('KMeans dengan 5 clusters')

plt.show()

